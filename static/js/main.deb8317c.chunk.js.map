{"version":3,"sources":["lib/utils.js","App.js","lib/enums.js","index.js"],"names":["coordinatesToPosition","coordinates","radius","lat","long","phi","Math","PI","theta","cos","sin","fromCoord","toCoord","App","scrollYProgress","useViewportScroll","globe","useRef","globeCoord","globeZoomVal","globeZoom","useTransform","treesZoom","treesOpacity","onChange","scale","current","x","y","z","camera","position","set","val","interpolate","calcCoord","className","div","style","opacity","options","enableCameraAutoRotate","enableCameraZoom","enableCameraRotate","globeCloudsOpacity","globeBackgroundTexture","onGetGlobe","g","RADIUS","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4nEAGO,SAASA,EAAsBC,EAAaC,GAAS,IAAD,cACrCD,EADqC,GAClDE,EADkD,KAC7CC,EAD6C,KAEnDC,EAAOF,EAAMG,KAAKC,GAAM,IACxBC,GAAUJ,EAAO,KAAOE,KAAKC,GAAM,IAMzC,MAAO,EAJIL,EAASI,KAAKG,IAAIJ,GAAOC,KAAKG,IAAID,GACnCN,EAASI,KAAKI,IAAIL,GAClBH,EAASI,KAAKG,IAAIJ,GAAOC,KAAKI,IAAIF,I,YCFxCG,EAAY,CAAC,YAAY,aACzBC,EAAU,CAAC,WAAW,WA6DbC,MA3Df,WAAgB,IACNC,EAAoBC,cAApBD,gBACFE,EAAQC,iBAAO,MACfC,EAAaD,iBAAON,GACpBQ,EAAeF,iBAAO,KACtBG,EAAYC,YAAaP,EAAiB,CAAC,GAAI,IAAM,CAAC,IAAI,IAC1DQ,EAAYD,YAAaP,EAAiB,CAAC,EAAE,IAAM,CAAC,EAAE,IACtDS,EAAeF,YAAaP,EAAiB,CAAC,IAAK,IAAM,CAAC,EAAE,IA4BlE,OA1BAM,EAAUI,UAAS,SAAAC,GACjB,GAAIT,EAAMU,QAAS,CACjBP,EAAaO,QAAUD,EADN,MAECzB,EAAsBkB,EAAWQ,QCrBnC,IDqBqDN,EAAUM,SAF9D,mBAEVC,EAFU,KAEPC,EAFO,KAEJC,EAFI,KAGjBb,EAAMU,QAAQI,OAAOC,SAASC,IAAIL,EAAGC,EAAGC,OAIrBR,YAAaP,GAAiB,SAACmB,GASpD,OARkBC,YAChB,CAAC,GAAK,IACN,CACE,CAAE/B,IAAKQ,EAAU,GAAIP,KAAMO,EAAU,IACrC,CAAER,IAAKS,EAAQ,GAAIR,KAAMQ,EAAQ,KAI9BuB,CAAUF,MAGJT,UAAS,SAACS,GACvBf,EAAWQ,QAAU,CAACO,EAAI9B,IAAK8B,EAAI7B,MADJ,MAEbJ,EAAsBkB,EAAWQ,QCxCjC,IDwCmDP,EAAaO,SAFnD,mBAExBC,EAFwB,KAErBC,EAFqB,KAElBC,EAFkB,KAG/Bb,EAAMU,QAAQI,OAAOC,SAASC,IAAIL,EAAGC,EAAGC,MAIxC,sBAAKO,UAAU,MAAf,UACE,cAAC,IAAOC,IAAR,CAAYD,UAAU,QAAQE,MAAO,CAAEb,MAAOH,EAAWiB,QAAShB,KAClE,qBAAKa,UAAU,QAAf,SACE,cAAC,IAAD,CACEI,QAAS,CAEPC,wBAAwB,EACxBC,kBAAkB,EAClBC,oBAAoB,EACpBC,mBAAoB,GAEtBC,uBAAwB,KACxBC,WAAY,SAACC,GAAO,IAAD,EACC/C,EAAsBkB,EAAWQ,QAASsB,KAD3C,mBACVrB,EADU,KACPC,EADO,KACJC,EADI,KAEjBkB,EAAEjB,OAAOC,SAASC,IAAIL,EAAGC,EAAGC,GAC5Bb,EAAMU,QAAUqB,WExD5BE,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.deb8317c.chunk.js","sourcesContent":["import * as TWEEN from 'es6-tween';\nimport ResizeObserver from 'resize-observer-polyfill';\n\nexport function coordinatesToPosition(coordinates, radius) {\n  const [lat, long] = coordinates;\n  const phi = (lat * Math.PI) / 180;\n  const theta = ((long - 180) * Math.PI) / 180;\n\n  const x = -radius * Math.cos(phi) * Math.cos(theta);\n  const y = radius * Math.sin(phi);\n  const z = radius * Math.cos(phi) * Math.sin(theta);\n\n  return [x, y, z];\n}\n\nexport function merge(object, defaultObject) {\n  const merged = { ...defaultObject };\n  Object.keys(merged).forEach(key => {\n    const value = object[key];\n    merged[key] = value === undefined ? merged[key] : value;\n  });\n  return merged;\n}\n\nexport function resize(element, callback) {\n  const resizeObserver = new ResizeObserver(entries => {\n    if (!entries || entries.length === 0) {\n      return;\n    }\n    const { height, width } = entries[0].contentRect;\n    callback({ height, width });\n  });\n\n  resizeObserver.observe(element);\n\n  return () => resizeObserver.unobserve(element);\n}\n\nexport function tween({\n  from,\n  to,\n  animationDuration,\n  easingFunction,\n  onUpdate,\n  onEnd = null,\n  delay = 0,\n}) {\n  const [equation, type] = easingFunction;\n\n  new TWEEN.Tween(from)\n    .to(to, animationDuration)\n    .easing(TWEEN.Easing[equation][type])\n    .on('update', onUpdate)\n    .on('complete', onEnd)\n    .delay(delay)\n    .start();\n}\n","import './App.css';\nimport { interpolate, Easing } from \"popmotion\";\nimport { useEffect, useState, useRef } from 'react';\nimport ReactGlobe from 'react-globe';\nimport { RADIUS } from './lib/enums';\nimport { coordinatesToPosition, tween } from './lib/utils';\nimport { motion, useViewportScroll, useSpring, useTransform } from \"framer-motion\"\n\nconst fromCoord = [41.4790327,-101.9235773]\nconst toCoord = [29.7539445,1.1006133]\n\nfunction App() {\n  const { scrollYProgress } = useViewportScroll();\n  const globe = useRef(null);\n  const globeCoord = useRef(fromCoord);\n  const globeZoomVal = useRef(1.1);\n  const globeZoom = useTransform(scrollYProgress, [0.3,0.6], [1.1,4]);\n  const treesZoom = useTransform(scrollYProgress, [0,0.3], [2,1]);\n  const treesOpacity = useTransform(scrollYProgress, [0.25,0.3], [1,0]);\n  \n  globeZoom.onChange(scale => {\n    if (globe.current) {\n      globeZoomVal.current = scale;\n      const [x, y, z] = coordinatesToPosition(globeCoord.current, RADIUS * globeZoom.current);\n      globe.current.camera.position.set(x, y, z)\n    }\n  });\n\n  const cameraPosition = useTransform(scrollYProgress, (val) => {\n    const calcCoord = interpolate(\n      [0.4, 0.8],\n      [\n        { lat: fromCoord[0], long: fromCoord[1] },\n        { lat: toCoord[0], long: toCoord[1] },\n      ]\n    );\n\n    return calcCoord(val);\n  });\n\n  cameraPosition.onChange((val) => {\n    globeCoord.current = [val.lat, val.long];\n    const [x, y, z] = coordinatesToPosition(globeCoord.current, RADIUS * globeZoomVal.current);\n    globe.current.camera.position.set(x, y, z)\n  });\n\n  return (\n    <div className=\"App\">\n      <motion.div className=\"trees\" style={{ scale: treesZoom, opacity: treesOpacity }}></motion.div>\n      <div className=\"globe\">\n        <ReactGlobe \n          options={{\n            //cameraAutoRotateSpeed: 0.5,\n            enableCameraAutoRotate: false,\n            enableCameraZoom: false,\n            enableCameraRotate: false,\n            globeCloudsOpacity: 1\n          }}\n          globeBackgroundTexture={null} \n          onGetGlobe={(g) => { \n            const [x, y, z] = coordinatesToPosition(globeCoord.current, RADIUS * 1.1);\n            g.camera.position.set(x, y, z)\n            globe.current = g;\n          }}\n          />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","export const CAMERA_FAR_RADIUS_SCALE = 1000;\nexport const BACKGROUND_RADIUS_SCALE = CAMERA_FAR_RADIUS_SCALE / 10;\nexport const RADIUS = 300;\n\nexport const MarkerTypes = {\n  BAR: 'bar',\n  DOT: 'dot',\n};\n","import 'core-js';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n//import reportWebVitals from './reportWebVitals';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}